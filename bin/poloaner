#!/usr/bin/python
# -*- coding: utf-8 -*-
#
#    BTC: 13MXa7EdMYaXaQK6cDHqd4dwr2stBK3ESE
#    LTC: LfxwJHNCjDh2qyJdfu22rBFi2Eu8BjQdxj
#
#    https://github.com/s4w3d0ff/marconibot
#
#    Copyright (C) 2017  https://github.com/s4w3d0ff
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
from marconi.trading import Loaner
from marconi.poloniex import Poloniex
from marconi.tools import sleep, logging, GR
from sys import argv

logging.basicConfig(
    format='[%(asctime)s]%(message)s',
    datefmt=GR("%H:%M:%S"),
    level=logging.INFO
)
logging.getLogger('requests').setLevel(logging.ERROR)
key, secret = argv[1:3]
#################-Configure Below-##################################
########################
loaner = Loaner(Poloniex(key, secret, timeout=None, jsonNums=float),
                # This dict defines what coins the bot should worry about
                # The dict 'key' is the coin to lend, 'value' is the
                # minimum amount to lend
                coins={'DASH': 1,
                       'BTC': 0.01,
                       'LTC': 1,
                       'DOGE': 10},
                # Maximum age (in secs) to let an open offer sit
                maxage=60 * 15,  # 15 min
                # number of seconds between loops
                delay=60 * 5)  # 5 min
########################
#################-Stop Configuring-#################################
loaner.start()
while loaner._running:
    try:
        sleep(1)
    except:
        loaner.stop()
        break
