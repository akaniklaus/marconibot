#!usr/bin/python3
from marconi.market import Market
from marconi.brain import Brain
from marconi.poloniex import Poloniex
from marconi.tools import (logging, json, getHomeDir,
                           OR, GR, isString, getLogger)

logger = getLogger(__name__)


class Marconi(object):
    def __init__(self, config):

        self.config = config
        if isString(self.config):
            self.config = json.load(fp=open(self.config))

        self.trainConfig = self.config['trainConfig']
        self.tradeConfig = self.config['tradeConfig']

        self.api = Poloniex(self.config['key'], self.config['secret'],
                            jsonNums=float)

        # create a Market instance for each market in tradeConfig
        self.markets = {}
        for market in self.tradeConfig:
            self.markets[market] = Market(self.api, market)

        self.brain = Brain(self.api)
        # should we load a brain?
        if 'brain' in self.config:
            self.brain.load(self.config['brain'])

    @property
    def brainStatus(self):
        """ Returns True if the brain is trained """
        return self.brain._trained

    def train(self, config=False):
        """ trains self.brain using a dict of kwargs  """
        logger.info('Training Brain')
        if config:
            self.trainConfig = config
        self.brain.train(**self.trainConfig)

    def save(self, name='marconi'):
        """ Saves current configuration in a json file '<name>.json' """
        json.dump(obj={"key": self.api.key,
                       "secret": self.api.secret,
                       "tradeConfig": self.tradeConfig,
                       "trainConfig": self.trainConfig,
                       "brain": name},
                  fp=open(name + ".json", 'w'),
                  indent=4)
        logger.info('%s.json saved', name)
        self.brain.save(name)


if __name__ == "__main__":
    import os
    dataDir = getHomeDir() + '/.marconi'
    # create data dir if it does not exist
    if not os.path.isdir(dataDir):
        os.makedirs(dataDir)
        raise RuntimeError(
            "A 'marconi.json' file needs to be created in %s", dataDir)

    configLoc = dataDir + '/marconi.json'

    bot = Marconi(configLoc)
    bot.train()
    bot.save(configLoc.split('.')[0] + '.' + configLoc.split('.')[1])
